# Frontend SSE Integration Guide

## Overview
This document describes the integration between the backend's LangGraph event streaming and the frontend's research timeline interface using Server-Sent Events (SSE).

## Backend LangGraph Event Streaming

### LangGraph Implementation
The backend uses LangGraph's native `astream_events()` method in `workflow.py`:

```python
async for event in self.app.astream_events(
    initial_state,
    version="v1",
    config={"configurable": {"thread_id": f"research-{int(time.time())}"}}
):
```

### Event Type Mapping
LangGraph events are transformed to frontend-friendly events:

```
LangGraph Event Type    →    Frontend Event Type
"on_chain_start"       →    "node_start"
"on_chain_end"         →    "node_complete"
"on_chain_stream"      →    "node_stream"
"on_chat_model_stream" →    "llm_token"
```

## SSE Event Payloads

### 1. node_start Event
**SSE Format:**
```
id: 0
event: node_start
data: {"type":"node_start","nodeId":"generate_queries","nodeType":"generate_queries","input":{"message":"Starting generate_queries"},"timestamp":1751654135.171881}
```

**JSON Payload Structure:**
```json
{
  "type": "node_start",
  "nodeId": "generate_queries",           // Node identifier
  "nodeType": "generate_queries",         // Node type (same as nodeId)
  "input": {                             // Node input data
    "message": "Starting generate_queries",
    "original_question": "user question",
    "query_list": [...],                 // Previous queries if any
    "search_results": [...],             // Previous results if any
    // ... other state fields
  },
  "timestamp": 1751654135.171881         // Unix timestamp
}
```

### 2. node_complete Event
**SSE Format:**
```
id: 1
event: node_complete
data: {"type":"node_complete","nodeId":"generate_queries","output":{...},"status":"success","duration":4857,"timestamp":1751654140.0288131}
```

**JSON Payload Structure:**
```json
{
  "type": "node_complete",
  "nodeId": "generate_queries",
  "output": {                           // Node output data (varies by node)
    "query_list": [                     // For generate_queries
      "blockchain whitepaper Bitcoin Satoshi Nakamoto 2008",
      "blockchain architecture components ledger blocks",
      "comparison blockchain consensus mechanisms PoW PoS"
    ],
    "rationale": "To build authoritative explanation...",
    "original_question": "Explain blockchain",
    "search_results": [],               // Empty at this stage
    "sources_gathered": [],
    "is_sufficient": false,
    "research_loop_count": 0,
    "total_queries_run": 0,
    "final_answer": "",
    "citations": [],
    "current_phase": "search_web",
    "errors": [],
    "warnings": []
  },
  "status": "success",                  // Always "success" for completed nodes
  "duration": 4857,                    // Duration in milliseconds
  "timestamp": 1751654140.0288131      // Unix timestamp
}
```

### 3. complete Event
**SSE Format:**
```
id: 10
event: complete
data: {"type":"complete","final_result":{...},"timestamp":1751654180.123}
```

**JSON Payload Structure:**
```json
{
  "type": "complete",
  "final_result": {
    "final_answer": "Comprehensive blockchain explanation...",
    "citations": ["Source 1", "Source 2", ...],
    "research_summary": {...},
    "sources_gathered": [...],
    "research_loop_count": 2,
    "total_queries_run": 6,
    "errors": [],
    "warnings": []
  },
  "timestamp": 1751654180.123
}
```

## Node-Specific Output Payloads

### 1. generate_queries Node
**node_complete output:**
```json
{
  "query_list": ["query1", "query2", "query3"],
  "rationale": "Research strategy explanation",
  "original_question": "User's question",
  "current_phase": "search_web"
}
```

### 2. web_search Node
**node_complete output:**
```json
{
  "search_results": [
    {
      "query": "search query used",
      "task_id": "initial_0",
      "sources": [
        {
          "title": "Article Title",
          "url": "https://example.com",
          "content": "Article content preview...",
          "relevance_score": 0.85
        }
      ]
    }
  ],
  "total_queries_run": 3,
  "current_phase": "aggregate_results"
}
```

### 3. aggregate_results Node
**node_complete output:**
```json
{
  "sources_gathered": [
    {
      "title": "Source Title",
      "url": "https://example.com",
      "content": "Full content",
      "relevance_score": 0.9
    }
  ],
  "research_summary": {
    "key_findings": ["Finding 1", "Finding 2"],
    "source_count": 15,
    "confidence_level": "high"
  },
  "is_sufficient": true,
  "knowledge_gap": "",
  "current_phase": "reflection"
}
```

### 4. reflection Node
**node_complete output:**
```json
{
  "follow_up_queries": ["Additional query 1", "Additional query 2"],
  "is_sufficient": false,
  "knowledge_gap": "Need more information about...",
  "research_loop_count": 1,
  "warnings": ["Warning about source quality"],
  "current_phase": "generate_queries" // or "generating_answer"
}
```

### 5. answer_generation Node
**node_complete output:**
```json
{
  "final_answer": "Comprehensive answer with citations...",
  "citations": [
    "Source 1: https://example.com",
    "Source 2: https://example.com"
  ],
  "research_summary": {
    "total_sources": 18,
    "research_loops": 2,
    "confidence": "high"
  },
  "timeline_updates": [...],
  "current_phase": "completed"
}
```

## Frontend Integration Mapping

### Node ID to Step ID Mapping
```javascript
const mapNodeIdToStepId = (nodeId) => {
  const mapping = {
    'generate_queries': 'generating-queries',
    'web_search': 'search-web',
    'aggregate_results': 'aggregate-results',
    'reflection': 'reflecting',
    'answer_generation': 'generating-answer'
  };
  return mapping[nodeId] || nodeId;
};
```

### Event Handler Implementation

#### 1. node_start Handler
```javascript
const handleNodeStart = (event) => {
  const payload = JSON.parse(event.data);
  const stepId = mapNodeIdToStepId(payload.nodeId);
  
  setSteps(prev => prev.map(step => {
    if (step.id !== stepId) return step;
    
    return {
      ...step,
      status: 'active',
      messages: [
        ...step.messages,
        {
          id: getMessageId(),
          content: getStartMessage(payload.nodeId, payload.input),
          timestamp: new Date(payload.timestamp * 1000),
          isComplete: false
        }
      ]
    };
  }));
};
```

#### 2. node_complete Handler
```javascript
const handleNodeComplete = (event) => {
  const payload = JSON.parse(event.data);
  const stepId = mapNodeIdToStepId(payload.nodeId);
  
  setSteps(prev => prev.map(step => {
    if (step.id !== stepId) return step;
    
    return {
      ...step,
      status: 'completed',
      summary: getSummary(payload.nodeId, payload.output),
      expandedContent: getExpandedContent(payload.nodeId, payload.output),
      messages: step.messages.map((msg, idx) => 
        idx === step.messages.length - 1 
          ? { ...msg, isComplete: true }
          : msg
      )
    };
  }));
};
```

### Content Generation Functions

#### Start Messages
```javascript
const getStartMessage = (nodeId, input) => {
  const messages = {
    'generate_queries': 'Analyzing your question to identify key research areas...',
    'web_search': `Searching for: "${input.query?.substring(0, 50)}..."`,
    'aggregate_results': 'Analyzing collected information for consistency...',
    'reflection': 'Cross-referencing facts across multiple sources...',
    'answer_generation': 'Synthesizing information from all sources...'
  };
  return messages[nodeId] || 'Processing...';
};
```

#### Summary Generation
```javascript
const getSummary = (nodeId, output) => {
  switch (nodeId) {
    case 'generate_queries':
      return `Generated ${output.query_list?.length || 0} targeted search queries`;
    case 'web_search':
      return `Found sources from search query`;
    case 'aggregate_results':
      return `Processed ${output.sources_gathered?.length || 0} sources`;
    case 'reflection':
      return `Identified ${output.follow_up_queries?.length || 0} follow-up areas`;
    case 'answer_generation':
      return `Generated answer with ${output.citations?.length || 0} citations`;
    default:
      return 'Step completed';
  }
};
```

#### Expanded Content Generation
```javascript
const getExpandedContent = (nodeId, output) => {
  switch (nodeId) {
    case 'generate_queries':
      return `Generated Queries:
${output.query_list?.map(q => `• ${q}`).join('\n') || 'None'}

Rationale: ${output.rationale || 'Not provided'}

Original Question: ${output.original_question || 'Not provided'}`;

    case 'web_search':
      return `Search Results:
Query: ${output.search_results?.[0]?.query || 'Not available'}
Sources Found: ${output.search_results?.[0]?.sources?.length || 0}

Total Queries Run: ${output.total_queries_run || 0}`;

    case 'aggregate_results':
      return `Sources Processed: ${output.sources_gathered?.length || 0}

Research Summary:
${JSON.stringify(output.research_summary || {}, null, 2)}

Information Sufficient: ${output.is_sufficient ? 'Yes' : 'No'}
Knowledge Gap: ${output.knowledge_gap || 'None identified'}`;

    case 'reflection':
      return `Research Loop: ${output.research_loop_count || 0}
Total Queries: ${output.total_queries_run || 0}

Follow-up Queries:
${output.follow_up_queries?.map(q => `• ${q}`).join('\n') || 'None'}

Warnings:
${output.warnings?.map(w => `• ${w}`).join('\n') || 'None'}`;

    case 'answer_generation':
      return `Answer Length: ${output.final_answer?.length || 0} characters

Citations: ${output.citations?.length || 0}
${output.citations?.map((c, i) => `${i + 1}. ${c}`).join('\n') || 'None'}

Research Statistics:
• Loops: ${output.research_loop_count || 0}
• Sources: ${output.sources_gathered?.length || 0}
• Queries: ${output.total_queries_run || 0}`;

    default:
      return 'Details not available';
  }
};
```

## SSE Connection Setup

### EventSource Configuration
```javascript
const startResearch = async () => {
  const eventSource = new EventSource(`${API_URL}/research/stream`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ 
      question: query, 
      stream_mode: 'events'  // Triggers LangGraph astream_events
    })
  });

  eventSource.addEventListener('node_start', handleNodeStart);
  eventSource.addEventListener('node_complete', handleNodeComplete);
  eventSource.addEventListener('complete', handleComplete);
  eventSource.onerror = handleError;
};
```

### Error Handling
```javascript
const handleError = (error) => {
  console.error('SSE Error:', error);
  setError('Connection lost to research service');
  setIsRunning(false);
  eventSource.close();
};
```

## Research Timeline Steps

### Updated Steps Configuration
```javascript
const [steps, setSteps] = useState([
  {
    id: 'generating-queries',
    title: 'Generating Queries',
    status: 'pending',
    messages: []
  },
  {
    id: 'search-web',
    title: 'Search Web',
    status: 'pending',
    messages: []
  },
  {
    id: 'aggregate-results',
    title: 'Aggregate Results',
    status: 'pending',
    messages: []
  },
  {
    id: 'reflecting',
    title: 'Reflecting',
    status: 'pending',
    messages: []
  },
  {
    id: 'generating-answer',
    title: 'Generating Answer',
    status: 'pending',
    messages: []
  }
]);
```

## Testing SSE Events

### Manual Testing with curl
```bash
curl -N -H "Accept: text/event-stream" -X POST http://localhost:8000/research/stream \
  -H "Content-Type: application/json" \
  -d '{"question":"Explain blockchain","stream_mode":"events"}'
```

### Expected Output Format
```
id: 0
event: node_start
data: {"type":"node_start","nodeId":"generate_queries",...}

id: 1
event: node_complete
data: {"type":"node_complete","nodeId":"generate_queries",...}

id: 2
event: node_start
data: {"type":"node_start","nodeId":"web_search",...}

...

id: 10
event: complete
data: {"type":"complete","final_result":{...}}
```

## Implementation Notes

1. **Event Ordering**: Events are emitted in the order nodes execute in the LangGraph workflow
2. **Error Handling**: Connection errors should fall back to demo mode
3. **State Management**: Each event updates the corresponding step in the timeline
4. **Performance**: SSE provides better performance than polling for real-time updates
5. **Reconnection**: SSE includes `id:` headers for potential reconnection support

## Next Steps

1. Replace `simulateResearchProcess()` with SSE event handlers
2. Update `ResearchInterface.tsx` to use EventSource
3. Test with real backend to verify event payloads
4. Add error handling and reconnection logic
5. Remove demo mode dependencies once SSE is working 